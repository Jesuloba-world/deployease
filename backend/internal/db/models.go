// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DeploymentStatus string

const (
	DeploymentStatusPending    DeploymentStatus = "pending"
	DeploymentStatusInProgress DeploymentStatus = "in_progress"
	DeploymentStatusSuccess    DeploymentStatus = "success"
	DeploymentStatusFailed     DeploymentStatus = "failed"
	DeploymentStatusCancelled  DeploymentStatus = "cancelled"
)

func (e *DeploymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeploymentStatus(s)
	case string:
		*e = DeploymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeploymentStatus: %T", src)
	}
	return nil
}

type NullDeploymentStatus struct {
	DeploymentStatus DeploymentStatus `json:"deployment_status"`
	Valid            bool             `json:"valid"` // Valid is true if DeploymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeploymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeploymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeploymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeploymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeploymentStatus), nil
}

type Deployment struct {
	ID         string             `json:"id"`
	ProjectID  string             `json:"project_id"`
	Status     DeploymentStatus   `json:"status"`
	CommitHash pgtype.Text        `json:"commit_hash"`
	DeployedAt pgtype.Timestamptz `json:"deployed_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type Project struct {
	ID            string             `json:"id"`
	Name          string             `json:"name"`
	Description   pgtype.Text        `json:"description"`
	RepositoryUrl string             `json:"repository_url"`
	UserID        string             `json:"user_id"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID           string             `json:"id"`
	Username     string             `json:"username"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}
